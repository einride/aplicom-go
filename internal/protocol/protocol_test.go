package protocol_test

import (
	"testing"

	protocol "github.com/einride/aplicom-go/internal/protocol"
	"github.com/stretchr/testify/require"
)

func BenchmarkPacket_Unmarshal_TestPacketData(b *testing.B) {
	var packetV3 protocol.PacketV3
	exampleData := getExampleData()
	for i := 0; i < b.N; i++ {
		if err := packetV3.UnmarshalBinary(exampleData[:]); err != nil {
			b.Fatal(err)
		}
	}
}

func TestPacket_Unmarshal_TestPacketData(t *testing.T) {
	var packetV3 protocol.PacketV3
	exampleData := getExampleData()
	err := packetV3.UnmarshalBinary(exampleData[:])
	require.NoError(t, err)
	require.Equal(t, getExamplePacket(), packetV3)
}

func getExamplePacket() protocol.PacketV3 {
	return protocol.PacketV3{
		ProtocolIdentifier: 0x44,
		ProtocolVersion:    0xC3,
		UnitIDHighBytes:    [4]byte{0x01, 0x43, 0x72, 0x07},
		UnitIDLowBytes:     [3]byte{0x29, 0xD6, 0x84},
		SnapshotDataLength: 0x5d,
		SelectorBits:       [3]byte{0x0b, 0xff, 0xff},
		EventID:            0x32,
		EventInformation:   0x00,
		DataValidity:       0xd0,
		Time:               0x5D7B2C08,
		GPSTime:            0x450ef906,
		Latitude:           0x03b20b80,
		Longitude:          0x03b20b80,
		NrOfSatellites:     0x10,
		Speed:              0x2c,
		MaxSpeed:           0x2c,
		Heading:            0x19,
		DINStatus:          0x87,
		AD1:                0x0000,
		AD2:                0x0000,
		AD3:                0x0000,
		AD4:                0x0000,
		MainPower:          0x3756,
		EXTBattery:         0x0000,
		PCNT1Rate:          0x0032,
		PCNT1Counter:       0x00001520,
		PCNT2Rate:          0x0000,
		PCNT2Counter:       0x00030aa2,
		Trip1Distance:      0x0003e9b5,
		Trip2Distance:      0x00006240,
		OutputStatus:       0x03,
		IButtonKeyID:       [6]byte{0x00, 0x00, 0x0b, 0xcb, 0x17, 0xab},
		DLKP3PADState:      0xff,
		GPSAltitude:        0x0066,
		SnapshotCounter:    0x00c9,
		FlagBits:           [8]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		CellInfo: protocol.CellInfo{
			Network: 0x01,
			LAI:     [3]byte{0x00, 0x5f, 0xab},
			LAC:     0x12c6,
			CID:     0x000024e1,
			RSSI:    0x17,
		},
		EventSpecificBytes: [256]byte{0x00, 0xb7, 0x01, 0xce, 0x0a, 0x28}, // MAX GEOFENCE_DYNAMIC can use 256bytes
	}
}

func getExampleData() [107]uint8 {
	return [107]uint8{
		0x44, 0xC3, 0x01, 0x43, 0x72, 0x07, 0x29, 0xD6, 0x84, 0x00, 0x5d,
		0x0b, 0xff, 0xff, 0x32, 0x00, 0xd0, 0x5D, 0x7B, 0x2C, 0x08, 0x45,
		0x0e, 0xf9, 0x06, 0x03, 0xb2, 0x0b, 0x80, 0x03, 0xb2, 0x0b, 0x80,
		0x10, 0x2c, 0x2c, 0x19, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x37, 0x56, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x15,
		0x20, 0x00, 0x00, 0x00, 0x03, 0x0a, 0xa2, 0x00, 0x03, 0xe9, 0xb5,
		0x00, 0x00, 0x62, 0x40, 0x03, 0x00, 0x00, 0x0b, 0xcb, 0x17, 0xab,
		0xff, 0x00, 0x66, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x00, 0x5f, 0xab, 0x12, 0xc6, 0x00, 0x00, 0x24,
		0xe1, 0x17, 0x00, 0xb7, 0x01, 0xce, 0x0a, 0x28,
	}
}
