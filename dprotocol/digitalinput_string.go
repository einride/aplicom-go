// Code generated by "stringer -type DigitalInput -trimprefix DigitalInput"; DO NOT EDIT.

package dprotocol

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DigitalInput1-1]
	_ = x[DigitalInput2-2]
	_ = x[DigitalInput3-4]
	_ = x[DigitalInput4-8]
	_ = x[DigitalInput5-16]
	_ = x[DigitalInput6-32]
	_ = x[DigitalInputIgnition-128]
	_ = x[DigitalInput7-256]
	_ = x[DigitalInput8-512]
	_ = x[DigitalInput9-1024]
	_ = x[DigitalInput10-2048]
}

const (
	_DigitalInput_name_0 = "12"
	_DigitalInput_name_1 = "3"
	_DigitalInput_name_2 = "4"
	_DigitalInput_name_3 = "5"
	_DigitalInput_name_4 = "6"
	_DigitalInput_name_5 = "Ignition"
	_DigitalInput_name_6 = "7"
	_DigitalInput_name_7 = "8"
	_DigitalInput_name_8 = "9"
	_DigitalInput_name_9 = "10"
)

var (
	_DigitalInput_index_0 = [...]uint8{0, 1, 2}
)

func (i DigitalInput) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _DigitalInput_name_0[_DigitalInput_index_0[i]:_DigitalInput_index_0[i+1]]
	case i == 4:
		return _DigitalInput_name_1
	case i == 8:
		return _DigitalInput_name_2
	case i == 16:
		return _DigitalInput_name_3
	case i == 32:
		return _DigitalInput_name_4
	case i == 128:
		return _DigitalInput_name_5
	case i == 256:
		return _DigitalInput_name_6
	case i == 512:
		return _DigitalInput_name_7
	case i == 1024:
		return _DigitalInput_name_8
	case i == 2048:
		return _DigitalInput_name_9
	default:
		return "DigitalInput(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
